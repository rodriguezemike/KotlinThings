<resources>
    <string name="app_name">Algs_ds</string>
    <string name="bubble_sort_algorithm">
        A = Mutable Array
        n = length(A)
        repeat
            swapped = false
            for i = 1 to n-1
                if A[i-1] > A[i] then
                    swap(A[i-1], A[i])
                    swapped = true
                end if
            end for
        until not swapped
    </string>
    <string name="bubble_sort_analysis">
        Worst-case performance O(n^2) comparisons,
                               O(n^2) swaps

        Best-case performance  O(n) comparisons,
                               O(1) swaps

        Average Performance    O(n^2) comparisons,
                               O(n^2) swaps

        Worst-case space complexity O(1) total,
                                    O(1) Auxiliary
    </string>
    <string name="insertion_sort_algorithm">
        i = 1
        A = Mutable Array
        while i &lt; length[A]
            j = i
            while j &gt; 0 and A[j-1] &gt;[j-1] > A[j]
                swap A[j] and A[j-1]
                j = j - 1
            end while
            i = i + 1
        end while
    </string>
    <string name="insertion_sort_info">
        Class - Sorting Algorithm
        Data Structure - Array
        Worst-case Performance - O(n^2)
        Best-case Performance - O(n), O(1) swaps
        Average Performance - O(n^2) comparisons and swaps
        Worst-case Space Complexity - O(n) total, O(1) Auxiliary
    </string>
    <string name="merge_sort_algorithm">
        Conceptually,
           1. Divide the unsorted list into n sublists,
                each containing one element(a list of one element is
                considered sorted).

            2. Repeatedly merge sublists to produce new
                sorted sublists until there is only one sublist
                remaining. This will be the sorted list.

        Interleaving Operation :

        function merge_sort(A[1,n])
            merge(merge_sort(A[1, n/2])), merge_sort(A[n/2+1, n])

        Psuedocode

        mergesort(A, low, high)
            if low &lt; high
                middle = low+high / 2
                mergesort(s, low, middle)
                mergesort(s, middle+1, high)
                merge(s, low, middle, high)

        merge(A, low, middle, high)
            int counter
            queue buffer1, buffer2

            for (i=low; i &lt;= middle; i++) enqueue(buffer1, s[i]);
            for (i=middle+1; i &lt;=high; i++) enqueue(buffer2, s[i]);

            i=low;
            while (!(empty_queue(buffer1) || empty_queue(buffer2)))
                if buffer1[0] &lt;= buffer2[0]
                    s[i++] = dequeue(buffer1)
                else
                    s[i++] = dequeue(buffer2)

            while(!empty_queue(buffer1)) s[i++] = dequeue(buffer1)
            while(!empty_queue(buffer2)) s[i++] = dequeue(buffer2)
    </string>
    <string name="merge_sort_info">
        Class - Sorting Algorithm
        Data structure - Array
        Worst-case performance - O(n log n)
        Best-case performance - Omega(n log n)
        Average case Performance - Theta(n log n)
    </string>
    <string name="selection_sort_algorithm">

    </string>
    <string-array name="sorts">
        <item>Bubble Sort</item>
        <item>Insertion Sort</item>
        <item>Merge Sort</item>
        <item>Selection Sort</item>
    </string-array>
    <string-array name="sorts_wikis">
        <item>https://en.wikipedia.org/wiki/Bubble_sort</item>
        <item>https://en.wikipedia.org/wiki/Insertion_sort</item>
        <item>https://en.wikipedia.org/wiki/Merge_sort</item>
        <item>https://en.wikipedia.org/wiki/Selection_sort</item>
    </string-array>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
</resources>
